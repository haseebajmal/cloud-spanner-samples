description = 'server'

apply plugin: 'application'

mainClassName = 'com.google.finapp.ServerMain'

dependencies {
    implementation group: 'com.google.cloud', name: 'google-cloud-spanner-jdbc', version:'2.0.2'
    implementation group: 'com.google.cloud', name: 'google-cloud-spanner', version:'6.3.3'
    implementation group: 'com.google.guava', name: 'guava', version:'30.1.1-jre'
    implementation group: 'com.google.protobuf', name: 'protobuf-java', version:'3.16.0'
    implementation group: 'io.grpc', name: 'grpc-netty-shaded', version:'1.38.0'
    implementation group: 'io.grpc', name: 'grpc-protobuf', version:'1.38.0'
    implementation group: 'io.grpc', name: 'grpc-stub', version:'1.38.0'
    implementation group: 'io.grpc', name: 'grpc-services', version:'1.38.0'
    implementation group: 'com.google.inject', name: 'guice', version:'5.0.1'
    implementation group: 'com.beust', name: 'jcommander', version:'1.81'
    runtimeOnly group: 'io.grpc', name: 'grpc-grpclb', version:'1.38.0'
    testImplementation group: 'junit', name: 'junit', version:'4.13.1'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version:'5.7.0'
    testImplementation group: 'com.google.truth', name: 'truth', version:'1.1.3'
    compileOnly group: 'org.apache.tomcat', name: 'annotations-api', version:'6.0.53'
}

sourceSets {
    main {
        java {
            srcDirs 'build/generated/source/proto/main/grpc'
            srcDirs 'build/generated/source/proto/main/java'
        }
    }
}

import java.util.concurrent.Executors
import java.util.concurrent.ExecutorService
import java.util.concurrent.Callable

task startGrpcServer() {
    doLast {
        println("Executing startGrpcServer task")
        ExecutorService es = Executors.newSingleThreadExecutor()
        es.submit({
            javaexec {
                classpath = project.sourceSets.main.runtimeClasspath
                main = "com.google.finapp.ServerMain"
                args = [
                    "--spanner_project_id=test-project",
                    "--spanner_instance_id=test-instance",
                    "--spanner_database_id=test-database"]
                errorOutput = System.out
            }} as Callable)
        ant.waitfor(
            maxwait:"10", maxwaitunit:"second", 
            checkevery:"500", checkeveryunit: "millisecond"
        ){
            socket(server:"localhost", port:8080)
        }
        ext.es = es
    }
}

task configureEmulator() {
    doFirst {
        exec {
            commandLine 'chmod', '+x', 'configure_emulator.sh'
        }
    }
    doLast {
        exec {
            commandLine './configure_emulator.sh'
        }
    }
}

task startEmulator() {
    ExecutorService es = Executors.newSingleThreadExecutor()
    es.submit({
        exec {
            commandLine 'gcloud', 'emulators', 'spanner', 'start'
        }} as Callable)
    ant.waitfor(
        maxwait:"10", maxwaitunit:"second", 
        checkevery:"500", checkeveryunit: "millisecond"
    ){
        socket(server:"localhost", port:9020)
    }
    finalizedBy tasks.configureEmulator
}

task shutDownServers(type:Exec) {
    commandLine 'fuser', '-k', '8080/tcp', '9010/tcp', '9020/tcp'
}

test {
    dependsOn tasks.startGrpcServer
    dependsOn tasks.startEmulator
    dependsOn cleanTest
    testLogging {
        events "passed", "skipped", "failed"
        showStandardStreams true
    }
    finalizedBy tasks.shutDownServers
}